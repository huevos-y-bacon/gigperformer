// Parameters
var sendCC : Subrange Parameter 0..1 = 1       // 0=disable CC, 1=enable CC
var tune : Subrange Parameter 0..50 = 0        // Parameter to adjust timing offset (0-50ms early send)

// Read-only parameter showing maximum late timing deviation as fraction of beat
var plus ("Late") : Continuous Parameter = 0.0
// Read-only parameter showing maximum early timing deviation as fraction of beat  
var minus ("Early") : Continuous Parameter = 0.0

// MIDI CC number that triggers beat events
const MIDI_CLOCK_CC : integer = 64
// MIDI channel for clock messages (channel 16)
const MIDI_CLOCK_CHN : integer = 16

// Timing variables
var beat : double = 0.0     // Time duration of one quarter note beat
var blast : double = 0.0    // Timestamp of last beat event for timing analysis

// Static MIDI message
var cc : midiMessage        // Pre-built CC beat marker message

// Function to calculate and update timing statistics
Function SetStats()
    var now : double = TimeSinceStartup()   // Get current time in milliseconds
    var delta : double = 0.0                // Initialize timing deviation variable
    If blast <> 0.0 Then                    // Only calculate if we have a previous beat time
        delta = (now - blast - beat) / beat // Calculate timing error as fraction of beat
        If plus < delta Then                // If this deviation is more late than previous max
            plus = delta                    // Update maximum late deviation
        elsif minus < -delta Then           // If this deviation is more early than previous max
            minus = -delta                  // Update maximum early deviation (store as positive)
        End
    End
    blast = now                             // Store current time for next calculation
End

// Function to calculate timing intervals based on current BPM
Function SetIntervals()
    var bps : double = GetBPM()/60          // Convert BPM to beats per second
    beat = (1000/bps)                       // Calculate milliseconds per beat
End

// Event handler: when sendCC parameter changes, reset stats and optionally send initial CC
On ParameterValueChanged matching sendCC
    SetIntervals()                          // Recalculate intervals with current BPM
    If sendCC >= 1 Then                     // If CC sending is enabled
        SendNow(cc)                         // Send initial CC immediately
    End
    blast = 0.0                             // Reset timing statistics
    plus = 0.0                              // Reset late timing statistic
    minus = 0.0                             // Reset early timing statistic
End

// Event handler: when tune parameter changes, recalculate timing
On ParameterValueChanged matching tune
    SetIntervals()                          // Recalculate intervals with current BPM
End

// Event handler: when CC 64 is received on channel 16, echo it back with timing adjustment
On ControlChangeEvent(m : ControlChangeMessage) Matching MIDI_CLOCK_CC
    If GetChannel(m) == MIDI_CLOCK_CHN Then // Only respond to messages on channel 16
        // Send CC message only if sendCC is enabled
        If sendCC >= 1 Then                 // Check if CC sending is enabled
            SendLater(cc,beat-tune)         // Send CC back out, advanced by 'tune' milliseconds
        End
        SetIntervals()                      // Recalculate intervals in case BPM changed
        SetStats()                          // Update timing statistics (always calculate for monitoring)
    End
End

// Called automatically after script is loaded
Initialization
    cc = MakeControlChangeMessageEx(MIDI_CLOCK_CC,127,MIDI_CLOCK_CHN) // Create CC 64, value 127, channel 16
    SetIntervals()                          // Calculate initial timing intervals
    // Initialize based on current parameter states
    If sendCC >= 1 Then                     // If CC sending is enabled
        SendNow(cc)                         // Send initial CC immediately 
    End
    blast = 0.0                             // Reset last beat timestamp
    plus = 0.0                              // Reset late timing statistic
    minus = 0.0                             // Reset early timing statistic
End
